// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  complaint: (where?: ComplaintWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  complaint: (where: ComplaintWhereUniqueInput) => ComplaintNullablePromise;
  complaints: (args?: {
    where?: ComplaintWhereInput;
    orderBy?: ComplaintOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Complaint>;
  complaintsConnection: (args?: {
    where?: ComplaintWhereInput;
    orderBy?: ComplaintOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ComplaintConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComplaint: (data: ComplaintCreateInput) => ComplaintPromise;
  updateComplaint: (args: {
    data: ComplaintUpdateInput;
    where: ComplaintWhereUniqueInput;
  }) => ComplaintPromise;
  updateManyComplaints: (args: {
    data: ComplaintUpdateManyMutationInput;
    where?: ComplaintWhereInput;
  }) => BatchPayloadPromise;
  upsertComplaint: (args: {
    where: ComplaintWhereUniqueInput;
    create: ComplaintCreateInput;
    update: ComplaintUpdateInput;
  }) => ComplaintPromise;
  deleteComplaint: (where: ComplaintWhereUniqueInput) => ComplaintPromise;
  deleteManyComplaints: (where?: ComplaintWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  complaint: (
    where?: ComplaintSubscriptionWhereInput
  ) => ComplaintSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ComplaintOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "Dealer_Code_ASC"
  | "Dealer_Code_DESC"
  | "Dealer_Code_Description_ASC"
  | "Dealer_Code_Description_DESC"
  | "Dealer_City_ASC"
  | "Dealer_City_DESC"
  | "PCR_Number_ASC"
  | "PCR_Number_DESC"
  | "PCR_Year_ASC"
  | "PCR_Year_DESC"
  | "VC_Number_ASC"
  | "VC_Number_DESC"
  | "VC_Description_ASC"
  | "VC_Description_DESC"
  | "Model_ASC"
  | "Model_DESC"
  | "Sub_Model_ASC"
  | "Sub_Model_DESC"
  | "Chassis_No_ASC"
  | "Chassis_No_DESC"
  | "Chassis_Type_ASC"
  | "Chassis_Type_DESC"
  | "Production_Month_ASC"
  | "Production_Month_DESC"
  | "Kilometers_Covered_ASC"
  | "Kilometers_Covered_DESC"
  | "Complaint_Aggregate_ASC"
  | "Complaint_Aggregate_DESC"
  | "Complaint_Aggregate_Description_ASC"
  | "Complaint_Aggregate_Description_DESC"
  | "Complaint_Group_ASC"
  | "Complaint_Group_DESC"
  | "Complaint_Group_Description_ASC"
  | "Complaint_Group_Description_DESC"
  | "Complaint_Code_ASC"
  | "Complaint_Code_DESC"
  | "Complaint_Code_Description_ASC"
  | "Complaint_Code_Description_DESC"
  | "Sale_Month_ASC"
  | "Sale_Month_DESC"
  | "Complaint_Month_ASC"
  | "Complaint_Month_DESC"
  | "Complaint_Reported_Date_ASC"
  | "Complaint_Reported_Date_DESC"
  | "Diff_between_Complaint_Sales_Month_ASC"
  | "Diff_between_Complaint_Sales_Month_DESC"
  | "Claim_Category_ASC"
  | "Claim_Category_DESC"
  | "Claim_Category_Description_ASC"
  | "Claim_Category_Description_DESC"
  | "Claims_Indicator_ASC"
  | "Claims_Indicator_DESC"
  | "No_of_Complaints_ASC"
  | "No_of_Complaints_DESC"
  | "Part_Number_ASC"
  | "Part_Number_DESC"
  | "Part_Description_ASC"
  | "Part_Description_DESC"
  | "Part_Quantity_ASC"
  | "Part_Quantity_DESC"
  | "Part_Rate_ASC"
  | "Part_Rate_DESC"
  | "Actual_Labour_Charge_ASC"
  | "Actual_Labour_Charge_DESC"
  | "Miscellaneous_Charge_ASC"
  | "Miscellaneous_Charge_DESC"
  | "Special_Labour_Charges_ASC"
  | "Special_Labour_Charges_DESC"
  | "Total_Expenses_ASC"
  | "Total_Expenses_DESC"
  | "Credit_Amount_ASC"
  | "Credit_Amount_DESC"
  | "Customer_Complaint_ASC"
  | "Customer_Complaint_DESC"
  | "Investigation_ASC"
  | "Investigation_DESC"
  | "Action_Taken_ASC"
  | "Action_Taken_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ComplaintWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ComplaintWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  Dealer_Code?: Maybe<String>;
  Dealer_Code_not?: Maybe<String>;
  Dealer_Code_in?: Maybe<String[] | String>;
  Dealer_Code_not_in?: Maybe<String[] | String>;
  Dealer_Code_lt?: Maybe<String>;
  Dealer_Code_lte?: Maybe<String>;
  Dealer_Code_gt?: Maybe<String>;
  Dealer_Code_gte?: Maybe<String>;
  Dealer_Code_contains?: Maybe<String>;
  Dealer_Code_not_contains?: Maybe<String>;
  Dealer_Code_starts_with?: Maybe<String>;
  Dealer_Code_not_starts_with?: Maybe<String>;
  Dealer_Code_ends_with?: Maybe<String>;
  Dealer_Code_not_ends_with?: Maybe<String>;
  Dealer_Code_Description?: Maybe<String>;
  Dealer_Code_Description_not?: Maybe<String>;
  Dealer_Code_Description_in?: Maybe<String[] | String>;
  Dealer_Code_Description_not_in?: Maybe<String[] | String>;
  Dealer_Code_Description_lt?: Maybe<String>;
  Dealer_Code_Description_lte?: Maybe<String>;
  Dealer_Code_Description_gt?: Maybe<String>;
  Dealer_Code_Description_gte?: Maybe<String>;
  Dealer_Code_Description_contains?: Maybe<String>;
  Dealer_Code_Description_not_contains?: Maybe<String>;
  Dealer_Code_Description_starts_with?: Maybe<String>;
  Dealer_Code_Description_not_starts_with?: Maybe<String>;
  Dealer_Code_Description_ends_with?: Maybe<String>;
  Dealer_Code_Description_not_ends_with?: Maybe<String>;
  Dealer_City?: Maybe<String>;
  Dealer_City_not?: Maybe<String>;
  Dealer_City_in?: Maybe<String[] | String>;
  Dealer_City_not_in?: Maybe<String[] | String>;
  Dealer_City_lt?: Maybe<String>;
  Dealer_City_lte?: Maybe<String>;
  Dealer_City_gt?: Maybe<String>;
  Dealer_City_gte?: Maybe<String>;
  Dealer_City_contains?: Maybe<String>;
  Dealer_City_not_contains?: Maybe<String>;
  Dealer_City_starts_with?: Maybe<String>;
  Dealer_City_not_starts_with?: Maybe<String>;
  Dealer_City_ends_with?: Maybe<String>;
  Dealer_City_not_ends_with?: Maybe<String>;
  PCR_Number?: Maybe<String>;
  PCR_Number_not?: Maybe<String>;
  PCR_Number_in?: Maybe<String[] | String>;
  PCR_Number_not_in?: Maybe<String[] | String>;
  PCR_Number_lt?: Maybe<String>;
  PCR_Number_lte?: Maybe<String>;
  PCR_Number_gt?: Maybe<String>;
  PCR_Number_gte?: Maybe<String>;
  PCR_Number_contains?: Maybe<String>;
  PCR_Number_not_contains?: Maybe<String>;
  PCR_Number_starts_with?: Maybe<String>;
  PCR_Number_not_starts_with?: Maybe<String>;
  PCR_Number_ends_with?: Maybe<String>;
  PCR_Number_not_ends_with?: Maybe<String>;
  PCR_Year?: Maybe<String>;
  PCR_Year_not?: Maybe<String>;
  PCR_Year_in?: Maybe<String[] | String>;
  PCR_Year_not_in?: Maybe<String[] | String>;
  PCR_Year_lt?: Maybe<String>;
  PCR_Year_lte?: Maybe<String>;
  PCR_Year_gt?: Maybe<String>;
  PCR_Year_gte?: Maybe<String>;
  PCR_Year_contains?: Maybe<String>;
  PCR_Year_not_contains?: Maybe<String>;
  PCR_Year_starts_with?: Maybe<String>;
  PCR_Year_not_starts_with?: Maybe<String>;
  PCR_Year_ends_with?: Maybe<String>;
  PCR_Year_not_ends_with?: Maybe<String>;
  VC_Number?: Maybe<String>;
  VC_Number_not?: Maybe<String>;
  VC_Number_in?: Maybe<String[] | String>;
  VC_Number_not_in?: Maybe<String[] | String>;
  VC_Number_lt?: Maybe<String>;
  VC_Number_lte?: Maybe<String>;
  VC_Number_gt?: Maybe<String>;
  VC_Number_gte?: Maybe<String>;
  VC_Number_contains?: Maybe<String>;
  VC_Number_not_contains?: Maybe<String>;
  VC_Number_starts_with?: Maybe<String>;
  VC_Number_not_starts_with?: Maybe<String>;
  VC_Number_ends_with?: Maybe<String>;
  VC_Number_not_ends_with?: Maybe<String>;
  VC_Description?: Maybe<String>;
  VC_Description_not?: Maybe<String>;
  VC_Description_in?: Maybe<String[] | String>;
  VC_Description_not_in?: Maybe<String[] | String>;
  VC_Description_lt?: Maybe<String>;
  VC_Description_lte?: Maybe<String>;
  VC_Description_gt?: Maybe<String>;
  VC_Description_gte?: Maybe<String>;
  VC_Description_contains?: Maybe<String>;
  VC_Description_not_contains?: Maybe<String>;
  VC_Description_starts_with?: Maybe<String>;
  VC_Description_not_starts_with?: Maybe<String>;
  VC_Description_ends_with?: Maybe<String>;
  VC_Description_not_ends_with?: Maybe<String>;
  Model?: Maybe<String>;
  Model_not?: Maybe<String>;
  Model_in?: Maybe<String[] | String>;
  Model_not_in?: Maybe<String[] | String>;
  Model_lt?: Maybe<String>;
  Model_lte?: Maybe<String>;
  Model_gt?: Maybe<String>;
  Model_gte?: Maybe<String>;
  Model_contains?: Maybe<String>;
  Model_not_contains?: Maybe<String>;
  Model_starts_with?: Maybe<String>;
  Model_not_starts_with?: Maybe<String>;
  Model_ends_with?: Maybe<String>;
  Model_not_ends_with?: Maybe<String>;
  Sub_Model?: Maybe<String>;
  Sub_Model_not?: Maybe<String>;
  Sub_Model_in?: Maybe<String[] | String>;
  Sub_Model_not_in?: Maybe<String[] | String>;
  Sub_Model_lt?: Maybe<String>;
  Sub_Model_lte?: Maybe<String>;
  Sub_Model_gt?: Maybe<String>;
  Sub_Model_gte?: Maybe<String>;
  Sub_Model_contains?: Maybe<String>;
  Sub_Model_not_contains?: Maybe<String>;
  Sub_Model_starts_with?: Maybe<String>;
  Sub_Model_not_starts_with?: Maybe<String>;
  Sub_Model_ends_with?: Maybe<String>;
  Sub_Model_not_ends_with?: Maybe<String>;
  Chassis_No?: Maybe<String>;
  Chassis_No_not?: Maybe<String>;
  Chassis_No_in?: Maybe<String[] | String>;
  Chassis_No_not_in?: Maybe<String[] | String>;
  Chassis_No_lt?: Maybe<String>;
  Chassis_No_lte?: Maybe<String>;
  Chassis_No_gt?: Maybe<String>;
  Chassis_No_gte?: Maybe<String>;
  Chassis_No_contains?: Maybe<String>;
  Chassis_No_not_contains?: Maybe<String>;
  Chassis_No_starts_with?: Maybe<String>;
  Chassis_No_not_starts_with?: Maybe<String>;
  Chassis_No_ends_with?: Maybe<String>;
  Chassis_No_not_ends_with?: Maybe<String>;
  Chassis_Type?: Maybe<String>;
  Chassis_Type_not?: Maybe<String>;
  Chassis_Type_in?: Maybe<String[] | String>;
  Chassis_Type_not_in?: Maybe<String[] | String>;
  Chassis_Type_lt?: Maybe<String>;
  Chassis_Type_lte?: Maybe<String>;
  Chassis_Type_gt?: Maybe<String>;
  Chassis_Type_gte?: Maybe<String>;
  Chassis_Type_contains?: Maybe<String>;
  Chassis_Type_not_contains?: Maybe<String>;
  Chassis_Type_starts_with?: Maybe<String>;
  Chassis_Type_not_starts_with?: Maybe<String>;
  Chassis_Type_ends_with?: Maybe<String>;
  Chassis_Type_not_ends_with?: Maybe<String>;
  Production_Month?: Maybe<String>;
  Production_Month_not?: Maybe<String>;
  Production_Month_in?: Maybe<String[] | String>;
  Production_Month_not_in?: Maybe<String[] | String>;
  Production_Month_lt?: Maybe<String>;
  Production_Month_lte?: Maybe<String>;
  Production_Month_gt?: Maybe<String>;
  Production_Month_gte?: Maybe<String>;
  Production_Month_contains?: Maybe<String>;
  Production_Month_not_contains?: Maybe<String>;
  Production_Month_starts_with?: Maybe<String>;
  Production_Month_not_starts_with?: Maybe<String>;
  Production_Month_ends_with?: Maybe<String>;
  Production_Month_not_ends_with?: Maybe<String>;
  Kilometers_Covered?: Maybe<String>;
  Kilometers_Covered_not?: Maybe<String>;
  Kilometers_Covered_in?: Maybe<String[] | String>;
  Kilometers_Covered_not_in?: Maybe<String[] | String>;
  Kilometers_Covered_lt?: Maybe<String>;
  Kilometers_Covered_lte?: Maybe<String>;
  Kilometers_Covered_gt?: Maybe<String>;
  Kilometers_Covered_gte?: Maybe<String>;
  Kilometers_Covered_contains?: Maybe<String>;
  Kilometers_Covered_not_contains?: Maybe<String>;
  Kilometers_Covered_starts_with?: Maybe<String>;
  Kilometers_Covered_not_starts_with?: Maybe<String>;
  Kilometers_Covered_ends_with?: Maybe<String>;
  Kilometers_Covered_not_ends_with?: Maybe<String>;
  Complaint_Aggregate?: Maybe<String>;
  Complaint_Aggregate_not?: Maybe<String>;
  Complaint_Aggregate_in?: Maybe<String[] | String>;
  Complaint_Aggregate_not_in?: Maybe<String[] | String>;
  Complaint_Aggregate_lt?: Maybe<String>;
  Complaint_Aggregate_lte?: Maybe<String>;
  Complaint_Aggregate_gt?: Maybe<String>;
  Complaint_Aggregate_gte?: Maybe<String>;
  Complaint_Aggregate_contains?: Maybe<String>;
  Complaint_Aggregate_not_contains?: Maybe<String>;
  Complaint_Aggregate_starts_with?: Maybe<String>;
  Complaint_Aggregate_not_starts_with?: Maybe<String>;
  Complaint_Aggregate_ends_with?: Maybe<String>;
  Complaint_Aggregate_not_ends_with?: Maybe<String>;
  Complaint_Aggregate_Description?: Maybe<String>;
  Complaint_Aggregate_Description_not?: Maybe<String>;
  Complaint_Aggregate_Description_in?: Maybe<String[] | String>;
  Complaint_Aggregate_Description_not_in?: Maybe<String[] | String>;
  Complaint_Aggregate_Description_lt?: Maybe<String>;
  Complaint_Aggregate_Description_lte?: Maybe<String>;
  Complaint_Aggregate_Description_gt?: Maybe<String>;
  Complaint_Aggregate_Description_gte?: Maybe<String>;
  Complaint_Aggregate_Description_contains?: Maybe<String>;
  Complaint_Aggregate_Description_not_contains?: Maybe<String>;
  Complaint_Aggregate_Description_starts_with?: Maybe<String>;
  Complaint_Aggregate_Description_not_starts_with?: Maybe<String>;
  Complaint_Aggregate_Description_ends_with?: Maybe<String>;
  Complaint_Aggregate_Description_not_ends_with?: Maybe<String>;
  Complaint_Group?: Maybe<String>;
  Complaint_Group_not?: Maybe<String>;
  Complaint_Group_in?: Maybe<String[] | String>;
  Complaint_Group_not_in?: Maybe<String[] | String>;
  Complaint_Group_lt?: Maybe<String>;
  Complaint_Group_lte?: Maybe<String>;
  Complaint_Group_gt?: Maybe<String>;
  Complaint_Group_gte?: Maybe<String>;
  Complaint_Group_contains?: Maybe<String>;
  Complaint_Group_not_contains?: Maybe<String>;
  Complaint_Group_starts_with?: Maybe<String>;
  Complaint_Group_not_starts_with?: Maybe<String>;
  Complaint_Group_ends_with?: Maybe<String>;
  Complaint_Group_not_ends_with?: Maybe<String>;
  Complaint_Group_Description?: Maybe<String>;
  Complaint_Group_Description_not?: Maybe<String>;
  Complaint_Group_Description_in?: Maybe<String[] | String>;
  Complaint_Group_Description_not_in?: Maybe<String[] | String>;
  Complaint_Group_Description_lt?: Maybe<String>;
  Complaint_Group_Description_lte?: Maybe<String>;
  Complaint_Group_Description_gt?: Maybe<String>;
  Complaint_Group_Description_gte?: Maybe<String>;
  Complaint_Group_Description_contains?: Maybe<String>;
  Complaint_Group_Description_not_contains?: Maybe<String>;
  Complaint_Group_Description_starts_with?: Maybe<String>;
  Complaint_Group_Description_not_starts_with?: Maybe<String>;
  Complaint_Group_Description_ends_with?: Maybe<String>;
  Complaint_Group_Description_not_ends_with?: Maybe<String>;
  Complaint_Code?: Maybe<String>;
  Complaint_Code_not?: Maybe<String>;
  Complaint_Code_in?: Maybe<String[] | String>;
  Complaint_Code_not_in?: Maybe<String[] | String>;
  Complaint_Code_lt?: Maybe<String>;
  Complaint_Code_lte?: Maybe<String>;
  Complaint_Code_gt?: Maybe<String>;
  Complaint_Code_gte?: Maybe<String>;
  Complaint_Code_contains?: Maybe<String>;
  Complaint_Code_not_contains?: Maybe<String>;
  Complaint_Code_starts_with?: Maybe<String>;
  Complaint_Code_not_starts_with?: Maybe<String>;
  Complaint_Code_ends_with?: Maybe<String>;
  Complaint_Code_not_ends_with?: Maybe<String>;
  Complaint_Code_Description?: Maybe<String>;
  Complaint_Code_Description_not?: Maybe<String>;
  Complaint_Code_Description_in?: Maybe<String[] | String>;
  Complaint_Code_Description_not_in?: Maybe<String[] | String>;
  Complaint_Code_Description_lt?: Maybe<String>;
  Complaint_Code_Description_lte?: Maybe<String>;
  Complaint_Code_Description_gt?: Maybe<String>;
  Complaint_Code_Description_gte?: Maybe<String>;
  Complaint_Code_Description_contains?: Maybe<String>;
  Complaint_Code_Description_not_contains?: Maybe<String>;
  Complaint_Code_Description_starts_with?: Maybe<String>;
  Complaint_Code_Description_not_starts_with?: Maybe<String>;
  Complaint_Code_Description_ends_with?: Maybe<String>;
  Complaint_Code_Description_not_ends_with?: Maybe<String>;
  Sale_Month?: Maybe<String>;
  Sale_Month_not?: Maybe<String>;
  Sale_Month_in?: Maybe<String[] | String>;
  Sale_Month_not_in?: Maybe<String[] | String>;
  Sale_Month_lt?: Maybe<String>;
  Sale_Month_lte?: Maybe<String>;
  Sale_Month_gt?: Maybe<String>;
  Sale_Month_gte?: Maybe<String>;
  Sale_Month_contains?: Maybe<String>;
  Sale_Month_not_contains?: Maybe<String>;
  Sale_Month_starts_with?: Maybe<String>;
  Sale_Month_not_starts_with?: Maybe<String>;
  Sale_Month_ends_with?: Maybe<String>;
  Sale_Month_not_ends_with?: Maybe<String>;
  Complaint_Month?: Maybe<String>;
  Complaint_Month_not?: Maybe<String>;
  Complaint_Month_in?: Maybe<String[] | String>;
  Complaint_Month_not_in?: Maybe<String[] | String>;
  Complaint_Month_lt?: Maybe<String>;
  Complaint_Month_lte?: Maybe<String>;
  Complaint_Month_gt?: Maybe<String>;
  Complaint_Month_gte?: Maybe<String>;
  Complaint_Month_contains?: Maybe<String>;
  Complaint_Month_not_contains?: Maybe<String>;
  Complaint_Month_starts_with?: Maybe<String>;
  Complaint_Month_not_starts_with?: Maybe<String>;
  Complaint_Month_ends_with?: Maybe<String>;
  Complaint_Month_not_ends_with?: Maybe<String>;
  Complaint_Reported_Date?: Maybe<String>;
  Complaint_Reported_Date_not?: Maybe<String>;
  Complaint_Reported_Date_in?: Maybe<String[] | String>;
  Complaint_Reported_Date_not_in?: Maybe<String[] | String>;
  Complaint_Reported_Date_lt?: Maybe<String>;
  Complaint_Reported_Date_lte?: Maybe<String>;
  Complaint_Reported_Date_gt?: Maybe<String>;
  Complaint_Reported_Date_gte?: Maybe<String>;
  Complaint_Reported_Date_contains?: Maybe<String>;
  Complaint_Reported_Date_not_contains?: Maybe<String>;
  Complaint_Reported_Date_starts_with?: Maybe<String>;
  Complaint_Reported_Date_not_starts_with?: Maybe<String>;
  Complaint_Reported_Date_ends_with?: Maybe<String>;
  Complaint_Reported_Date_not_ends_with?: Maybe<String>;
  Diff_between_Complaint_Sales_Month?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_not?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_in?: Maybe<String[] | String>;
  Diff_between_Complaint_Sales_Month_not_in?: Maybe<String[] | String>;
  Diff_between_Complaint_Sales_Month_lt?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_lte?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_gt?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_gte?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_contains?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_not_contains?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_starts_with?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_not_starts_with?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_ends_with?: Maybe<String>;
  Diff_between_Complaint_Sales_Month_not_ends_with?: Maybe<String>;
  Claim_Category?: Maybe<String>;
  Claim_Category_not?: Maybe<String>;
  Claim_Category_in?: Maybe<String[] | String>;
  Claim_Category_not_in?: Maybe<String[] | String>;
  Claim_Category_lt?: Maybe<String>;
  Claim_Category_lte?: Maybe<String>;
  Claim_Category_gt?: Maybe<String>;
  Claim_Category_gte?: Maybe<String>;
  Claim_Category_contains?: Maybe<String>;
  Claim_Category_not_contains?: Maybe<String>;
  Claim_Category_starts_with?: Maybe<String>;
  Claim_Category_not_starts_with?: Maybe<String>;
  Claim_Category_ends_with?: Maybe<String>;
  Claim_Category_not_ends_with?: Maybe<String>;
  Claim_Category_Description?: Maybe<String>;
  Claim_Category_Description_not?: Maybe<String>;
  Claim_Category_Description_in?: Maybe<String[] | String>;
  Claim_Category_Description_not_in?: Maybe<String[] | String>;
  Claim_Category_Description_lt?: Maybe<String>;
  Claim_Category_Description_lte?: Maybe<String>;
  Claim_Category_Description_gt?: Maybe<String>;
  Claim_Category_Description_gte?: Maybe<String>;
  Claim_Category_Description_contains?: Maybe<String>;
  Claim_Category_Description_not_contains?: Maybe<String>;
  Claim_Category_Description_starts_with?: Maybe<String>;
  Claim_Category_Description_not_starts_with?: Maybe<String>;
  Claim_Category_Description_ends_with?: Maybe<String>;
  Claim_Category_Description_not_ends_with?: Maybe<String>;
  Claims_Indicator?: Maybe<String>;
  Claims_Indicator_not?: Maybe<String>;
  Claims_Indicator_in?: Maybe<String[] | String>;
  Claims_Indicator_not_in?: Maybe<String[] | String>;
  Claims_Indicator_lt?: Maybe<String>;
  Claims_Indicator_lte?: Maybe<String>;
  Claims_Indicator_gt?: Maybe<String>;
  Claims_Indicator_gte?: Maybe<String>;
  Claims_Indicator_contains?: Maybe<String>;
  Claims_Indicator_not_contains?: Maybe<String>;
  Claims_Indicator_starts_with?: Maybe<String>;
  Claims_Indicator_not_starts_with?: Maybe<String>;
  Claims_Indicator_ends_with?: Maybe<String>;
  Claims_Indicator_not_ends_with?: Maybe<String>;
  No_of_Complaints?: Maybe<String>;
  No_of_Complaints_not?: Maybe<String>;
  No_of_Complaints_in?: Maybe<String[] | String>;
  No_of_Complaints_not_in?: Maybe<String[] | String>;
  No_of_Complaints_lt?: Maybe<String>;
  No_of_Complaints_lte?: Maybe<String>;
  No_of_Complaints_gt?: Maybe<String>;
  No_of_Complaints_gte?: Maybe<String>;
  No_of_Complaints_contains?: Maybe<String>;
  No_of_Complaints_not_contains?: Maybe<String>;
  No_of_Complaints_starts_with?: Maybe<String>;
  No_of_Complaints_not_starts_with?: Maybe<String>;
  No_of_Complaints_ends_with?: Maybe<String>;
  No_of_Complaints_not_ends_with?: Maybe<String>;
  Part_Number?: Maybe<String>;
  Part_Number_not?: Maybe<String>;
  Part_Number_in?: Maybe<String[] | String>;
  Part_Number_not_in?: Maybe<String[] | String>;
  Part_Number_lt?: Maybe<String>;
  Part_Number_lte?: Maybe<String>;
  Part_Number_gt?: Maybe<String>;
  Part_Number_gte?: Maybe<String>;
  Part_Number_contains?: Maybe<String>;
  Part_Number_not_contains?: Maybe<String>;
  Part_Number_starts_with?: Maybe<String>;
  Part_Number_not_starts_with?: Maybe<String>;
  Part_Number_ends_with?: Maybe<String>;
  Part_Number_not_ends_with?: Maybe<String>;
  Part_Description?: Maybe<String>;
  Part_Description_not?: Maybe<String>;
  Part_Description_in?: Maybe<String[] | String>;
  Part_Description_not_in?: Maybe<String[] | String>;
  Part_Description_lt?: Maybe<String>;
  Part_Description_lte?: Maybe<String>;
  Part_Description_gt?: Maybe<String>;
  Part_Description_gte?: Maybe<String>;
  Part_Description_contains?: Maybe<String>;
  Part_Description_not_contains?: Maybe<String>;
  Part_Description_starts_with?: Maybe<String>;
  Part_Description_not_starts_with?: Maybe<String>;
  Part_Description_ends_with?: Maybe<String>;
  Part_Description_not_ends_with?: Maybe<String>;
  Part_Quantity?: Maybe<String>;
  Part_Quantity_not?: Maybe<String>;
  Part_Quantity_in?: Maybe<String[] | String>;
  Part_Quantity_not_in?: Maybe<String[] | String>;
  Part_Quantity_lt?: Maybe<String>;
  Part_Quantity_lte?: Maybe<String>;
  Part_Quantity_gt?: Maybe<String>;
  Part_Quantity_gte?: Maybe<String>;
  Part_Quantity_contains?: Maybe<String>;
  Part_Quantity_not_contains?: Maybe<String>;
  Part_Quantity_starts_with?: Maybe<String>;
  Part_Quantity_not_starts_with?: Maybe<String>;
  Part_Quantity_ends_with?: Maybe<String>;
  Part_Quantity_not_ends_with?: Maybe<String>;
  Part_Rate?: Maybe<String>;
  Part_Rate_not?: Maybe<String>;
  Part_Rate_in?: Maybe<String[] | String>;
  Part_Rate_not_in?: Maybe<String[] | String>;
  Part_Rate_lt?: Maybe<String>;
  Part_Rate_lte?: Maybe<String>;
  Part_Rate_gt?: Maybe<String>;
  Part_Rate_gte?: Maybe<String>;
  Part_Rate_contains?: Maybe<String>;
  Part_Rate_not_contains?: Maybe<String>;
  Part_Rate_starts_with?: Maybe<String>;
  Part_Rate_not_starts_with?: Maybe<String>;
  Part_Rate_ends_with?: Maybe<String>;
  Part_Rate_not_ends_with?: Maybe<String>;
  Actual_Labour_Charge?: Maybe<String>;
  Actual_Labour_Charge_not?: Maybe<String>;
  Actual_Labour_Charge_in?: Maybe<String[] | String>;
  Actual_Labour_Charge_not_in?: Maybe<String[] | String>;
  Actual_Labour_Charge_lt?: Maybe<String>;
  Actual_Labour_Charge_lte?: Maybe<String>;
  Actual_Labour_Charge_gt?: Maybe<String>;
  Actual_Labour_Charge_gte?: Maybe<String>;
  Actual_Labour_Charge_contains?: Maybe<String>;
  Actual_Labour_Charge_not_contains?: Maybe<String>;
  Actual_Labour_Charge_starts_with?: Maybe<String>;
  Actual_Labour_Charge_not_starts_with?: Maybe<String>;
  Actual_Labour_Charge_ends_with?: Maybe<String>;
  Actual_Labour_Charge_not_ends_with?: Maybe<String>;
  Miscellaneous_Charge?: Maybe<String>;
  Miscellaneous_Charge_not?: Maybe<String>;
  Miscellaneous_Charge_in?: Maybe<String[] | String>;
  Miscellaneous_Charge_not_in?: Maybe<String[] | String>;
  Miscellaneous_Charge_lt?: Maybe<String>;
  Miscellaneous_Charge_lte?: Maybe<String>;
  Miscellaneous_Charge_gt?: Maybe<String>;
  Miscellaneous_Charge_gte?: Maybe<String>;
  Miscellaneous_Charge_contains?: Maybe<String>;
  Miscellaneous_Charge_not_contains?: Maybe<String>;
  Miscellaneous_Charge_starts_with?: Maybe<String>;
  Miscellaneous_Charge_not_starts_with?: Maybe<String>;
  Miscellaneous_Charge_ends_with?: Maybe<String>;
  Miscellaneous_Charge_not_ends_with?: Maybe<String>;
  Special_Labour_Charges?: Maybe<String>;
  Special_Labour_Charges_not?: Maybe<String>;
  Special_Labour_Charges_in?: Maybe<String[] | String>;
  Special_Labour_Charges_not_in?: Maybe<String[] | String>;
  Special_Labour_Charges_lt?: Maybe<String>;
  Special_Labour_Charges_lte?: Maybe<String>;
  Special_Labour_Charges_gt?: Maybe<String>;
  Special_Labour_Charges_gte?: Maybe<String>;
  Special_Labour_Charges_contains?: Maybe<String>;
  Special_Labour_Charges_not_contains?: Maybe<String>;
  Special_Labour_Charges_starts_with?: Maybe<String>;
  Special_Labour_Charges_not_starts_with?: Maybe<String>;
  Special_Labour_Charges_ends_with?: Maybe<String>;
  Special_Labour_Charges_not_ends_with?: Maybe<String>;
  Total_Expenses?: Maybe<String>;
  Total_Expenses_not?: Maybe<String>;
  Total_Expenses_in?: Maybe<String[] | String>;
  Total_Expenses_not_in?: Maybe<String[] | String>;
  Total_Expenses_lt?: Maybe<String>;
  Total_Expenses_lte?: Maybe<String>;
  Total_Expenses_gt?: Maybe<String>;
  Total_Expenses_gte?: Maybe<String>;
  Total_Expenses_contains?: Maybe<String>;
  Total_Expenses_not_contains?: Maybe<String>;
  Total_Expenses_starts_with?: Maybe<String>;
  Total_Expenses_not_starts_with?: Maybe<String>;
  Total_Expenses_ends_with?: Maybe<String>;
  Total_Expenses_not_ends_with?: Maybe<String>;
  Credit_Amount?: Maybe<String>;
  Credit_Amount_not?: Maybe<String>;
  Credit_Amount_in?: Maybe<String[] | String>;
  Credit_Amount_not_in?: Maybe<String[] | String>;
  Credit_Amount_lt?: Maybe<String>;
  Credit_Amount_lte?: Maybe<String>;
  Credit_Amount_gt?: Maybe<String>;
  Credit_Amount_gte?: Maybe<String>;
  Credit_Amount_contains?: Maybe<String>;
  Credit_Amount_not_contains?: Maybe<String>;
  Credit_Amount_starts_with?: Maybe<String>;
  Credit_Amount_not_starts_with?: Maybe<String>;
  Credit_Amount_ends_with?: Maybe<String>;
  Credit_Amount_not_ends_with?: Maybe<String>;
  Customer_Complaint?: Maybe<String>;
  Customer_Complaint_not?: Maybe<String>;
  Customer_Complaint_in?: Maybe<String[] | String>;
  Customer_Complaint_not_in?: Maybe<String[] | String>;
  Customer_Complaint_lt?: Maybe<String>;
  Customer_Complaint_lte?: Maybe<String>;
  Customer_Complaint_gt?: Maybe<String>;
  Customer_Complaint_gte?: Maybe<String>;
  Customer_Complaint_contains?: Maybe<String>;
  Customer_Complaint_not_contains?: Maybe<String>;
  Customer_Complaint_starts_with?: Maybe<String>;
  Customer_Complaint_not_starts_with?: Maybe<String>;
  Customer_Complaint_ends_with?: Maybe<String>;
  Customer_Complaint_not_ends_with?: Maybe<String>;
  Investigation?: Maybe<String>;
  Investigation_not?: Maybe<String>;
  Investigation_in?: Maybe<String[] | String>;
  Investigation_not_in?: Maybe<String[] | String>;
  Investigation_lt?: Maybe<String>;
  Investigation_lte?: Maybe<String>;
  Investigation_gt?: Maybe<String>;
  Investigation_gte?: Maybe<String>;
  Investigation_contains?: Maybe<String>;
  Investigation_not_contains?: Maybe<String>;
  Investigation_starts_with?: Maybe<String>;
  Investigation_not_starts_with?: Maybe<String>;
  Investigation_ends_with?: Maybe<String>;
  Investigation_not_ends_with?: Maybe<String>;
  Action_Taken?: Maybe<String>;
  Action_Taken_not?: Maybe<String>;
  Action_Taken_in?: Maybe<String[] | String>;
  Action_Taken_not_in?: Maybe<String[] | String>;
  Action_Taken_lt?: Maybe<String>;
  Action_Taken_lte?: Maybe<String>;
  Action_Taken_gt?: Maybe<String>;
  Action_Taken_gte?: Maybe<String>;
  Action_Taken_contains?: Maybe<String>;
  Action_Taken_not_contains?: Maybe<String>;
  Action_Taken_starts_with?: Maybe<String>;
  Action_Taken_not_starts_with?: Maybe<String>;
  Action_Taken_ends_with?: Maybe<String>;
  Action_Taken_not_ends_with?: Maybe<String>;
  AND?: Maybe<ComplaintWhereInput[] | ComplaintWhereInput>;
  OR?: Maybe<ComplaintWhereInput[] | ComplaintWhereInput>;
  NOT?: Maybe<ComplaintWhereInput[] | ComplaintWhereInput>;
}

export interface ComplaintCreateInput {
  id?: Maybe<ID_Input>;
  Dealer_Code?: Maybe<String>;
  Dealer_Code_Description?: Maybe<String>;
  Dealer_City?: Maybe<String>;
  PCR_Number?: Maybe<String>;
  PCR_Year?: Maybe<String>;
  VC_Number?: Maybe<String>;
  VC_Description?: Maybe<String>;
  Model?: Maybe<String>;
  Sub_Model?: Maybe<String>;
  Chassis_No?: Maybe<String>;
  Chassis_Type?: Maybe<String>;
  Production_Month?: Maybe<String>;
  Kilometers_Covered?: Maybe<String>;
  Complaint_Aggregate?: Maybe<String>;
  Complaint_Aggregate_Description?: Maybe<String>;
  Complaint_Group?: Maybe<String>;
  Complaint_Group_Description?: Maybe<String>;
  Complaint_Code?: Maybe<String>;
  Complaint_Code_Description?: Maybe<String>;
  Sale_Month?: Maybe<String>;
  Complaint_Month?: Maybe<String>;
  Complaint_Reported_Date?: Maybe<String>;
  Diff_between_Complaint_Sales_Month?: Maybe<String>;
  Claim_Category?: Maybe<String>;
  Claim_Category_Description?: Maybe<String>;
  Claims_Indicator?: Maybe<String>;
  No_of_Complaints?: Maybe<String>;
  Part_Number?: Maybe<String>;
  Part_Description?: Maybe<String>;
  Part_Quantity?: Maybe<String>;
  Part_Rate?: Maybe<String>;
  Actual_Labour_Charge?: Maybe<String>;
  Miscellaneous_Charge?: Maybe<String>;
  Special_Labour_Charges?: Maybe<String>;
  Total_Expenses?: Maybe<String>;
  Credit_Amount?: Maybe<String>;
  Customer_Complaint?: Maybe<String>;
  Investigation?: Maybe<String>;
  Action_Taken?: Maybe<String>;
}

export interface ComplaintUpdateInput {
  Dealer_Code?: Maybe<String>;
  Dealer_Code_Description?: Maybe<String>;
  Dealer_City?: Maybe<String>;
  PCR_Number?: Maybe<String>;
  PCR_Year?: Maybe<String>;
  VC_Number?: Maybe<String>;
  VC_Description?: Maybe<String>;
  Model?: Maybe<String>;
  Sub_Model?: Maybe<String>;
  Chassis_No?: Maybe<String>;
  Chassis_Type?: Maybe<String>;
  Production_Month?: Maybe<String>;
  Kilometers_Covered?: Maybe<String>;
  Complaint_Aggregate?: Maybe<String>;
  Complaint_Aggregate_Description?: Maybe<String>;
  Complaint_Group?: Maybe<String>;
  Complaint_Group_Description?: Maybe<String>;
  Complaint_Code?: Maybe<String>;
  Complaint_Code_Description?: Maybe<String>;
  Sale_Month?: Maybe<String>;
  Complaint_Month?: Maybe<String>;
  Complaint_Reported_Date?: Maybe<String>;
  Diff_between_Complaint_Sales_Month?: Maybe<String>;
  Claim_Category?: Maybe<String>;
  Claim_Category_Description?: Maybe<String>;
  Claims_Indicator?: Maybe<String>;
  No_of_Complaints?: Maybe<String>;
  Part_Number?: Maybe<String>;
  Part_Description?: Maybe<String>;
  Part_Quantity?: Maybe<String>;
  Part_Rate?: Maybe<String>;
  Actual_Labour_Charge?: Maybe<String>;
  Miscellaneous_Charge?: Maybe<String>;
  Special_Labour_Charges?: Maybe<String>;
  Total_Expenses?: Maybe<String>;
  Credit_Amount?: Maybe<String>;
  Customer_Complaint?: Maybe<String>;
  Investigation?: Maybe<String>;
  Action_Taken?: Maybe<String>;
}

export interface ComplaintUpdateManyMutationInput {
  Dealer_Code?: Maybe<String>;
  Dealer_Code_Description?: Maybe<String>;
  Dealer_City?: Maybe<String>;
  PCR_Number?: Maybe<String>;
  PCR_Year?: Maybe<String>;
  VC_Number?: Maybe<String>;
  VC_Description?: Maybe<String>;
  Model?: Maybe<String>;
  Sub_Model?: Maybe<String>;
  Chassis_No?: Maybe<String>;
  Chassis_Type?: Maybe<String>;
  Production_Month?: Maybe<String>;
  Kilometers_Covered?: Maybe<String>;
  Complaint_Aggregate?: Maybe<String>;
  Complaint_Aggregate_Description?: Maybe<String>;
  Complaint_Group?: Maybe<String>;
  Complaint_Group_Description?: Maybe<String>;
  Complaint_Code?: Maybe<String>;
  Complaint_Code_Description?: Maybe<String>;
  Sale_Month?: Maybe<String>;
  Complaint_Month?: Maybe<String>;
  Complaint_Reported_Date?: Maybe<String>;
  Diff_between_Complaint_Sales_Month?: Maybe<String>;
  Claim_Category?: Maybe<String>;
  Claim_Category_Description?: Maybe<String>;
  Claims_Indicator?: Maybe<String>;
  No_of_Complaints?: Maybe<String>;
  Part_Number?: Maybe<String>;
  Part_Description?: Maybe<String>;
  Part_Quantity?: Maybe<String>;
  Part_Rate?: Maybe<String>;
  Actual_Labour_Charge?: Maybe<String>;
  Miscellaneous_Charge?: Maybe<String>;
  Special_Labour_Charges?: Maybe<String>;
  Total_Expenses?: Maybe<String>;
  Credit_Amount?: Maybe<String>;
  Customer_Complaint?: Maybe<String>;
  Investigation?: Maybe<String>;
  Action_Taken?: Maybe<String>;
}

export interface ComplaintSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ComplaintWhereInput>;
  AND?: Maybe<
    ComplaintSubscriptionWhereInput[] | ComplaintSubscriptionWhereInput
  >;
  OR?: Maybe<
    ComplaintSubscriptionWhereInput[] | ComplaintSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ComplaintSubscriptionWhereInput[] | ComplaintSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Complaint {
  id: ID_Output;
  Dealer_Code?: String;
  Dealer_Code_Description?: String;
  Dealer_City?: String;
  PCR_Number?: String;
  PCR_Year?: String;
  VC_Number?: String;
  VC_Description?: String;
  Model?: String;
  Sub_Model?: String;
  Chassis_No?: String;
  Chassis_Type?: String;
  Production_Month?: String;
  Kilometers_Covered?: String;
  Complaint_Aggregate?: String;
  Complaint_Aggregate_Description?: String;
  Complaint_Group?: String;
  Complaint_Group_Description?: String;
  Complaint_Code?: String;
  Complaint_Code_Description?: String;
  Sale_Month?: String;
  Complaint_Month?: String;
  Complaint_Reported_Date?: String;
  Diff_between_Complaint_Sales_Month?: String;
  Claim_Category?: String;
  Claim_Category_Description?: String;
  Claims_Indicator?: String;
  No_of_Complaints?: String;
  Part_Number?: String;
  Part_Description?: String;
  Part_Quantity?: String;
  Part_Rate?: String;
  Actual_Labour_Charge?: String;
  Miscellaneous_Charge?: String;
  Special_Labour_Charges?: String;
  Total_Expenses?: String;
  Credit_Amount?: String;
  Customer_Complaint?: String;
  Investigation?: String;
  Action_Taken?: String;
}

export interface ComplaintPromise extends Promise<Complaint>, Fragmentable {
  id: () => Promise<ID_Output>;
  Dealer_Code: () => Promise<String>;
  Dealer_Code_Description: () => Promise<String>;
  Dealer_City: () => Promise<String>;
  PCR_Number: () => Promise<String>;
  PCR_Year: () => Promise<String>;
  VC_Number: () => Promise<String>;
  VC_Description: () => Promise<String>;
  Model: () => Promise<String>;
  Sub_Model: () => Promise<String>;
  Chassis_No: () => Promise<String>;
  Chassis_Type: () => Promise<String>;
  Production_Month: () => Promise<String>;
  Kilometers_Covered: () => Promise<String>;
  Complaint_Aggregate: () => Promise<String>;
  Complaint_Aggregate_Description: () => Promise<String>;
  Complaint_Group: () => Promise<String>;
  Complaint_Group_Description: () => Promise<String>;
  Complaint_Code: () => Promise<String>;
  Complaint_Code_Description: () => Promise<String>;
  Sale_Month: () => Promise<String>;
  Complaint_Month: () => Promise<String>;
  Complaint_Reported_Date: () => Promise<String>;
  Diff_between_Complaint_Sales_Month: () => Promise<String>;
  Claim_Category: () => Promise<String>;
  Claim_Category_Description: () => Promise<String>;
  Claims_Indicator: () => Promise<String>;
  No_of_Complaints: () => Promise<String>;
  Part_Number: () => Promise<String>;
  Part_Description: () => Promise<String>;
  Part_Quantity: () => Promise<String>;
  Part_Rate: () => Promise<String>;
  Actual_Labour_Charge: () => Promise<String>;
  Miscellaneous_Charge: () => Promise<String>;
  Special_Labour_Charges: () => Promise<String>;
  Total_Expenses: () => Promise<String>;
  Credit_Amount: () => Promise<String>;
  Customer_Complaint: () => Promise<String>;
  Investigation: () => Promise<String>;
  Action_Taken: () => Promise<String>;
}

export interface ComplaintSubscription
  extends Promise<AsyncIterator<Complaint>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Dealer_Code: () => Promise<AsyncIterator<String>>;
  Dealer_Code_Description: () => Promise<AsyncIterator<String>>;
  Dealer_City: () => Promise<AsyncIterator<String>>;
  PCR_Number: () => Promise<AsyncIterator<String>>;
  PCR_Year: () => Promise<AsyncIterator<String>>;
  VC_Number: () => Promise<AsyncIterator<String>>;
  VC_Description: () => Promise<AsyncIterator<String>>;
  Model: () => Promise<AsyncIterator<String>>;
  Sub_Model: () => Promise<AsyncIterator<String>>;
  Chassis_No: () => Promise<AsyncIterator<String>>;
  Chassis_Type: () => Promise<AsyncIterator<String>>;
  Production_Month: () => Promise<AsyncIterator<String>>;
  Kilometers_Covered: () => Promise<AsyncIterator<String>>;
  Complaint_Aggregate: () => Promise<AsyncIterator<String>>;
  Complaint_Aggregate_Description: () => Promise<AsyncIterator<String>>;
  Complaint_Group: () => Promise<AsyncIterator<String>>;
  Complaint_Group_Description: () => Promise<AsyncIterator<String>>;
  Complaint_Code: () => Promise<AsyncIterator<String>>;
  Complaint_Code_Description: () => Promise<AsyncIterator<String>>;
  Sale_Month: () => Promise<AsyncIterator<String>>;
  Complaint_Month: () => Promise<AsyncIterator<String>>;
  Complaint_Reported_Date: () => Promise<AsyncIterator<String>>;
  Diff_between_Complaint_Sales_Month: () => Promise<AsyncIterator<String>>;
  Claim_Category: () => Promise<AsyncIterator<String>>;
  Claim_Category_Description: () => Promise<AsyncIterator<String>>;
  Claims_Indicator: () => Promise<AsyncIterator<String>>;
  No_of_Complaints: () => Promise<AsyncIterator<String>>;
  Part_Number: () => Promise<AsyncIterator<String>>;
  Part_Description: () => Promise<AsyncIterator<String>>;
  Part_Quantity: () => Promise<AsyncIterator<String>>;
  Part_Rate: () => Promise<AsyncIterator<String>>;
  Actual_Labour_Charge: () => Promise<AsyncIterator<String>>;
  Miscellaneous_Charge: () => Promise<AsyncIterator<String>>;
  Special_Labour_Charges: () => Promise<AsyncIterator<String>>;
  Total_Expenses: () => Promise<AsyncIterator<String>>;
  Credit_Amount: () => Promise<AsyncIterator<String>>;
  Customer_Complaint: () => Promise<AsyncIterator<String>>;
  Investigation: () => Promise<AsyncIterator<String>>;
  Action_Taken: () => Promise<AsyncIterator<String>>;
}

export interface ComplaintNullablePromise
  extends Promise<Complaint | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Dealer_Code: () => Promise<String>;
  Dealer_Code_Description: () => Promise<String>;
  Dealer_City: () => Promise<String>;
  PCR_Number: () => Promise<String>;
  PCR_Year: () => Promise<String>;
  VC_Number: () => Promise<String>;
  VC_Description: () => Promise<String>;
  Model: () => Promise<String>;
  Sub_Model: () => Promise<String>;
  Chassis_No: () => Promise<String>;
  Chassis_Type: () => Promise<String>;
  Production_Month: () => Promise<String>;
  Kilometers_Covered: () => Promise<String>;
  Complaint_Aggregate: () => Promise<String>;
  Complaint_Aggregate_Description: () => Promise<String>;
  Complaint_Group: () => Promise<String>;
  Complaint_Group_Description: () => Promise<String>;
  Complaint_Code: () => Promise<String>;
  Complaint_Code_Description: () => Promise<String>;
  Sale_Month: () => Promise<String>;
  Complaint_Month: () => Promise<String>;
  Complaint_Reported_Date: () => Promise<String>;
  Diff_between_Complaint_Sales_Month: () => Promise<String>;
  Claim_Category: () => Promise<String>;
  Claim_Category_Description: () => Promise<String>;
  Claims_Indicator: () => Promise<String>;
  No_of_Complaints: () => Promise<String>;
  Part_Number: () => Promise<String>;
  Part_Description: () => Promise<String>;
  Part_Quantity: () => Promise<String>;
  Part_Rate: () => Promise<String>;
  Actual_Labour_Charge: () => Promise<String>;
  Miscellaneous_Charge: () => Promise<String>;
  Special_Labour_Charges: () => Promise<String>;
  Total_Expenses: () => Promise<String>;
  Credit_Amount: () => Promise<String>;
  Customer_Complaint: () => Promise<String>;
  Investigation: () => Promise<String>;
  Action_Taken: () => Promise<String>;
}

export interface ComplaintConnection {
  pageInfo: PageInfo;
  edges: ComplaintEdge[];
}

export interface ComplaintConnectionPromise
  extends Promise<ComplaintConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ComplaintEdge>>() => T;
  aggregate: <T = AggregateComplaintPromise>() => T;
}

export interface ComplaintConnectionSubscription
  extends Promise<AsyncIterator<ComplaintConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ComplaintEdgeSubscription>>>() => T;
  aggregate: <T = AggregateComplaintSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ComplaintEdge {
  node: Complaint;
  cursor: String;
}

export interface ComplaintEdgePromise
  extends Promise<ComplaintEdge>,
    Fragmentable {
  node: <T = ComplaintPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ComplaintEdgeSubscription
  extends Promise<AsyncIterator<ComplaintEdge>>,
    Fragmentable {
  node: <T = ComplaintSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComplaint {
  count: Int;
}

export interface AggregateComplaintPromise
  extends Promise<AggregateComplaint>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateComplaintSubscription
  extends Promise<AsyncIterator<AggregateComplaint>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ComplaintSubscriptionPayload {
  mutation: MutationType;
  node: Complaint;
  updatedFields: String[];
  previousValues: ComplaintPreviousValues;
}

export interface ComplaintSubscriptionPayloadPromise
  extends Promise<ComplaintSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ComplaintPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ComplaintPreviousValuesPromise>() => T;
}

export interface ComplaintSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ComplaintSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ComplaintSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ComplaintPreviousValuesSubscription>() => T;
}

export interface ComplaintPreviousValues {
  id: ID_Output;
  Dealer_Code?: String;
  Dealer_Code_Description?: String;
  Dealer_City?: String;
  PCR_Number?: String;
  PCR_Year?: String;
  VC_Number?: String;
  VC_Description?: String;
  Model?: String;
  Sub_Model?: String;
  Chassis_No?: String;
  Chassis_Type?: String;
  Production_Month?: String;
  Kilometers_Covered?: String;
  Complaint_Aggregate?: String;
  Complaint_Aggregate_Description?: String;
  Complaint_Group?: String;
  Complaint_Group_Description?: String;
  Complaint_Code?: String;
  Complaint_Code_Description?: String;
  Sale_Month?: String;
  Complaint_Month?: String;
  Complaint_Reported_Date?: String;
  Diff_between_Complaint_Sales_Month?: String;
  Claim_Category?: String;
  Claim_Category_Description?: String;
  Claims_Indicator?: String;
  No_of_Complaints?: String;
  Part_Number?: String;
  Part_Description?: String;
  Part_Quantity?: String;
  Part_Rate?: String;
  Actual_Labour_Charge?: String;
  Miscellaneous_Charge?: String;
  Special_Labour_Charges?: String;
  Total_Expenses?: String;
  Credit_Amount?: String;
  Customer_Complaint?: String;
  Investigation?: String;
  Action_Taken?: String;
}

export interface ComplaintPreviousValuesPromise
  extends Promise<ComplaintPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  Dealer_Code: () => Promise<String>;
  Dealer_Code_Description: () => Promise<String>;
  Dealer_City: () => Promise<String>;
  PCR_Number: () => Promise<String>;
  PCR_Year: () => Promise<String>;
  VC_Number: () => Promise<String>;
  VC_Description: () => Promise<String>;
  Model: () => Promise<String>;
  Sub_Model: () => Promise<String>;
  Chassis_No: () => Promise<String>;
  Chassis_Type: () => Promise<String>;
  Production_Month: () => Promise<String>;
  Kilometers_Covered: () => Promise<String>;
  Complaint_Aggregate: () => Promise<String>;
  Complaint_Aggregate_Description: () => Promise<String>;
  Complaint_Group: () => Promise<String>;
  Complaint_Group_Description: () => Promise<String>;
  Complaint_Code: () => Promise<String>;
  Complaint_Code_Description: () => Promise<String>;
  Sale_Month: () => Promise<String>;
  Complaint_Month: () => Promise<String>;
  Complaint_Reported_Date: () => Promise<String>;
  Diff_between_Complaint_Sales_Month: () => Promise<String>;
  Claim_Category: () => Promise<String>;
  Claim_Category_Description: () => Promise<String>;
  Claims_Indicator: () => Promise<String>;
  No_of_Complaints: () => Promise<String>;
  Part_Number: () => Promise<String>;
  Part_Description: () => Promise<String>;
  Part_Quantity: () => Promise<String>;
  Part_Rate: () => Promise<String>;
  Actual_Labour_Charge: () => Promise<String>;
  Miscellaneous_Charge: () => Promise<String>;
  Special_Labour_Charges: () => Promise<String>;
  Total_Expenses: () => Promise<String>;
  Credit_Amount: () => Promise<String>;
  Customer_Complaint: () => Promise<String>;
  Investigation: () => Promise<String>;
  Action_Taken: () => Promise<String>;
}

export interface ComplaintPreviousValuesSubscription
  extends Promise<AsyncIterator<ComplaintPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Dealer_Code: () => Promise<AsyncIterator<String>>;
  Dealer_Code_Description: () => Promise<AsyncIterator<String>>;
  Dealer_City: () => Promise<AsyncIterator<String>>;
  PCR_Number: () => Promise<AsyncIterator<String>>;
  PCR_Year: () => Promise<AsyncIterator<String>>;
  VC_Number: () => Promise<AsyncIterator<String>>;
  VC_Description: () => Promise<AsyncIterator<String>>;
  Model: () => Promise<AsyncIterator<String>>;
  Sub_Model: () => Promise<AsyncIterator<String>>;
  Chassis_No: () => Promise<AsyncIterator<String>>;
  Chassis_Type: () => Promise<AsyncIterator<String>>;
  Production_Month: () => Promise<AsyncIterator<String>>;
  Kilometers_Covered: () => Promise<AsyncIterator<String>>;
  Complaint_Aggregate: () => Promise<AsyncIterator<String>>;
  Complaint_Aggregate_Description: () => Promise<AsyncIterator<String>>;
  Complaint_Group: () => Promise<AsyncIterator<String>>;
  Complaint_Group_Description: () => Promise<AsyncIterator<String>>;
  Complaint_Code: () => Promise<AsyncIterator<String>>;
  Complaint_Code_Description: () => Promise<AsyncIterator<String>>;
  Sale_Month: () => Promise<AsyncIterator<String>>;
  Complaint_Month: () => Promise<AsyncIterator<String>>;
  Complaint_Reported_Date: () => Promise<AsyncIterator<String>>;
  Diff_between_Complaint_Sales_Month: () => Promise<AsyncIterator<String>>;
  Claim_Category: () => Promise<AsyncIterator<String>>;
  Claim_Category_Description: () => Promise<AsyncIterator<String>>;
  Claims_Indicator: () => Promise<AsyncIterator<String>>;
  No_of_Complaints: () => Promise<AsyncIterator<String>>;
  Part_Number: () => Promise<AsyncIterator<String>>;
  Part_Description: () => Promise<AsyncIterator<String>>;
  Part_Quantity: () => Promise<AsyncIterator<String>>;
  Part_Rate: () => Promise<AsyncIterator<String>>;
  Actual_Labour_Charge: () => Promise<AsyncIterator<String>>;
  Miscellaneous_Charge: () => Promise<AsyncIterator<String>>;
  Special_Labour_Charges: () => Promise<AsyncIterator<String>>;
  Total_Expenses: () => Promise<AsyncIterator<String>>;
  Credit_Amount: () => Promise<AsyncIterator<String>>;
  Customer_Complaint: () => Promise<AsyncIterator<String>>;
  Investigation: () => Promise<AsyncIterator<String>>;
  Action_Taken: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Complaint",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
